name: 💿 OpenAppFilter
on:
  workflow_dispatch:
    inputs:
      network_settings:
        description: "初始网络配置"
        required: true
        default: 'dhcp'
        type: choice
        options:
          - 'static'
          - 'dhcp'
      ipaddr:
        description: '管理IP（静态必填）'
        required: true
        default: '192.168.5.88'
      gateway:
        description: '默认网关（静态必填）'
        required: true
        default: '192.168.5.1'
      include_docker:
        description: "集成Docker"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: ⚙️ 设置可执行权限
      run: | 
        chmod +x arm64/build24.sh
        chmod +x shell/*.sh

    - name: ⚙️ 配置网络参数
      run: |
        CONFIG_PATH="./files/etc/uci-defaults/99-custom.sh"
        if [ "${{ inputs.network_settings }}" = "static" ]; then
          sed -i '44,105d' "$CONFIG_PATH"
          sed -i "/ipaddr/s/192.168.5.88/${{ inputs.ipaddr }}/g" "$CONFIG_PATH"
          sed -i "/gateway/s/192.168.5.1/${{ inputs.gateway }}/g" "$CONFIG_PATH"
        else
          sed -i '36,42d' "$CONFIG_PATH"
        fi
        cat $CONFIG_PATH

    - name: ⏬ 安装依赖工具
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses5-dev zstd curl unzip tree git

    - name: ⏬ 下载ImageBuilder
      run: |
        curl -L -o imagebuilder.tar.zst https://github.com/Kwonelee/iStoreOS-Actions/releases/download/iStoreOS-ImageBuilder-20250905/istoreos-imagebuilder-armsr-armv8.Linux-x86_64.tar.zst
        tar --use-compress-program=unzstd -xvf imagebuilder.tar.zst
        mv istoreos-imagebuilder-* imagebuilder

    - name: ⏬ 克隆OpenAppFilter源码
      run: |
        git clone https://github.com/destan19/OpenAppFilter.git openappfilter
        mkdir -p imagebuilder/package/openappfilter
        cp -r openappfilter/* imagebuilder/package/openappfilter/

    - name: ⚙️ 配置编译参数（关键修复）
      run: |
        # 复制基础文件
        cp arm64/{build24.sh,Makefile} imagebuilder/
        cp shell/{prepare-packages.sh,custom-packages.sh} imagebuilder/
        find files/packages/ -name "*.ipk" -exec cp {} imagebuilder/packages/ \;
        
        # 创建必要目录
        mkdir -p imagebuilder/files/etc/{uci-defaults,opkg,banner1,openclash/core}
        cp files/etc/uci-defaults/99-custom.sh imagebuilder/files/etc/uci-defaults/
        cp files/etc/opkg/distfeeds.conf imagebuilder/files/etc/opkg/
        cp files/etc/banner imagebuilder/files/etc/banner1/
        cp files/etc/openclash/core/clash_meta imagebuilder/files/etc/openclash/core/
        cp files/etc/rc.local imagebuilder/files/etc/
        
        # 进入imagebuilder目录配置编译选项
        cd imagebuilder
        
        # 启用rootfs.tar.gz
        sed -i 's/# CONFIG_TARGET_ROOTFS_TARGZ is not set/CONFIG_TARGET_ROOTFS_TARGZ=y/' .config
        sed -i "s|CONFIG_TARGET_ROOTFS_SQUASHFS=.*|# CONFIG_TARGET_ROOTFS_SQUASHFS is not set|g" .config
        sed -i "s|CONFIG_TARGET_IMAGES_GZIP=.*|# CONFIG_TARGET_IMAGES_GZIP is not set|g" .config
        
        # 强制启用OpenAppFilter全组件（关键修复点1）
        echo "CONFIG_PACKAGE_appfilter=y" >> .config
        echo "CONFIG_PACKAGE_oaf=y" >> .config
        echo "CONFIG_PACKAGE_luci-app-oaf=y" >> .config
        echo "CONFIG_PACKAGE_luci-i18n-oaf-zh-cn=y" >> .config
        echo "CONFIG_PACKAGE_luci-app-appfilter=y" >> .config
        echo "CONFIG_PACKAGE_luci-i18n-appfilter-zh-cn=y" >> .config

    - name: 🛠️ 修改build24.sh启用OAF（关键修复点2）
      run: |
        # 解除build24.sh中OAF相关包的注释
        sed -i 's/#PACKAGES="$PACKAGES luci-i18n-oaf-zh-cn"/PACKAGES="$PACKAGES luci-i18n-oaf-zh-cn"/g' imagebuilder/build24.sh
        sed -i 's/#PACKAGES="$PACKAGES luci-app-oaf"/PACKAGES="$PACKAGES luci-app-oaf"/g' imagebuilder/build24.sh
        sed -i 's/#PACKAGES="$PACKAGES appfilter"/PACKAGES="$PACKAGES appfilter"/g' imagebuilder/build24.sh
        # 添加缺失的appfilter相关包
        echo 'PACKAGES="$PACKAGES oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES luci-app-appfilter"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES luci-i18n-appfilter-zh-cn"' >> imagebuilder/build24.sh

    - name: 🧱 构建系统和插件
      working-directory: ./imagebuilder
      run: |
        echo "开始编译，显示详细过程..."
        bash ./build24.sh
        # 显示编译产物结构（方便调试）
        tree -L 4 bin/
        tree -L 4 packages/

    - name: 📌 收集所有OAF相关IPK（增强版）
      id: collect_ipks
      run: |
        mkdir -p openappfilter_ipk
        # 多模式匹配确保所有相关IPK被收集
        find imagebuilder/ -type f -name "appfilter*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "oaf*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "luci-app-oaf*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "luci-i18n-oaf*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "luci-app-appfilter*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "luci-i18n-appfilter*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "*.ipk" -exec cp {} openappfilter_ipk/ \; -print
        find imagebuilder/ -type f -name "*.ko" -exec cp {} openappfilter_ipk/ \; -print
        
        # 检查收集结果
        echo "收集到的IPK文件："
        ls -l openappfilter_ipk/
        if [ -z "$(ls -A openappfilter_ipk/)" ]; then
          echo "错误：未找到OpenAppFilter相关IPK，请检查编译日志"
          exit 1
        fi
        echo "ipk_files=openappfilter_ipk/*.*" >> $GITHUB_OUTPUT

    - name: 🚀 上传产物到Release
      uses: softprops/action-gh-release@v2.2.1
      with:
        tag_name: iStoreOS-24.10-OAF-${{ inputs.network_settings }}
        body: |
          📌 版本：iStoreOS-24.10.2 带OpenAppFilter完整版
          🧩 已确认包含：
          - appfilter 基础组件
          - oaf 核心模块
          - luci-app-oaf 管理界面
          - luci-i18n-oaf-zh-cn 中文语言包
          - luci-app-appfilter 扩展界面
          - luci-i18n-appfilter-zh-cn 扩展中文包
        files: |
          imagebuilder/bin/targets/armsr/armv8/*generic-rootfs.tar.gz
          ${{ steps.collect_ipks.outputs.ipk_files }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
