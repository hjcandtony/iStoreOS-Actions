name: 💿 1126St1_Build-Rootfs-release-oaf
on:
  workflow_dispatch:
    inputs:
      network_settings:
        description: "请选择初始网络配置"
        required: true
        default: 'dhcp'
        type: choice
        options:
          - 'static'
          - 'dhcp'
      ipaddr:
        description: '请输入管理IP（静态地址时必填）'
        required: true
        default: '192.168.5.88'
      gateway:
        description: '请输入默认网关（静态地址时必填）'
        required: true
        default: '192.168.5.1'
      include_docker:
        description: "是否集成Docker插件"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: ⚙️ 准备构建脚本
      run: |
        mkdir -p arm64
        if [ ! -f "arm64/build24.sh" ]; then
          echo "创建基础build24.sh"
          cat > arm64/build24.sh << EOF
          #!/bin/bash
          set -e
          PACKAGES=""
          make image PACKAGES="\$PACKAGES"
        EOF
          chmod +x arm64/build24.sh
        fi
        
        mkdir -p shell
        for script in "prepare-packages.sh" "custom-packages.sh"; do
          if [ ! -f "shell/$script" ]; then
            cat > "shell/$script" << EOF
            #!/bin/bash
            exit 0
        EOF
            chmod +x "shell/$script"
          fi
        done

    - name: ⚙️ 设置IP和网关
      run: |
        CONFIG_PATH="./files/etc/uci-defaults/99-custom.sh"
        mkdir -p "$(dirname "$CONFIG_PATH")"
        if [ ! -f "$CONFIG_PATH" ]; then
          cat > "$CONFIG_PATH" << EOF
          #!/bin/sh
          uci set network.lan.proto=dhcp
          uci commit network
        EOF
          chmod +x "$CONFIG_PATH"
        fi
        
        if [ "${{ inputs.network_settings }}" = "static" ]; then
           sed -i 's/proto=dhcp/proto=static/' "$CONFIG_PATH"
           sed -i "/lan/s/$/ipaddr=${{ inputs.ipaddr }}\n gateway=${{ inputs.gateway }}/" "$CONFIG_PATH"
        fi

    - name: ⏬ 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses5-dev zstd curl unzip git \
          libssl-dev python3-distutils file rsync

    - name: ⏬ 下载iStoreOS ImageBuilder
      run: |
        IMAGEBUILDER_URL="https://github.com/Kwonelee/iStoreOS-Actions/releases/download/iStoreOS-ImageBuilder-20250905/istoreos-imagebuilder-armsr-armv8.Linux-x86_64.tar.zst"
        curl -L -o imagebuilder.tar.zst "$IMAGEBUILDER_URL"
        
        mkdir -p imagebuilder
        tar --use-compress-program=unzstd -xvf imagebuilder.tar.zst -C imagebuilder --strip-components=1
        
        # 确保核心目录存在
        for dir in "package" "bin" "build_dir" "feeds" "target" "scripts"; do
          [ ! -d "imagebuilder/$dir" ] && mkdir -p "imagebuilder/$dir"
        done
        
        [ ! -f "imagebuilder/Makefile" ] && { echo "ImageBuilder缺失Makefile"; exit 1; }

    - name: ⏬ 获取OAF预编译IPK（关键修复）
      run: |
        # 创建OAF IPK存放目录
        mkdir -p imagebuilder/packages/oaf
        
        # 下载适合armsr-armv8架构的OAF预编译包
        OAF_ARCH="aarch64_cortex-a53"  # 适配iStoreOS armsr-armv8架构
        OAF_VER="1.0.1"
        
        # 核心过滤模块
        curl -L -o "imagebuilder/packages/oaf/oaf_${OAF_VER}_${OAF_ARCH}.ipk" "https://github.com/destan19/OpenAppFilter/releases/download/v${OAF_VER}/oaf_${OAF_VER}_${OAF_ARCH}.ipk"
        
        # 服务组件
        curl -L -o "imagebuilder/packages/oaf/open-app-filter_${OAF_VER}_${OAF_ARCH}.ipk" "https://github.com/destan19/OpenAppFilter/releases/download/v${OAF_VER}/open-app-filter_${OAF_VER}_${OAF_ARCH}.ipk"
        
        # Web界面
        curl -L -o "imagebuilder/packages/oaf/luci-app-oaf_${OAF_VER}_all.ipk" "https://github.com/destan19/OpenAppFilter/releases/download/v${OAF_VER}/luci-app-oaf_${OAF_VER}_all.ipk"
        
        # 中文语言包
        curl -L -o "imagebuilder/packages/oaf/luci-i18n-oaf-zh-cn_${OAF_VER}_all.ipk" "https://github.com/destan19/OpenAppFilter/releases/download/v${OAF_VER}/luci-i18n-oaf-zh-cn_${OAF_VER}_all.ipk"
        
        # 验证下载结果
        for ipk in $(ls imagebuilder/packages/oaf/*.ipk); do
          if [ ! -s "$ipk" ]; then
            echo "错误：OAF IPK文件 $ipk 下载失败"
            exit 1
          fi
        done
        
        # 复制到ImageBuilder的packages目录
        cp imagebuilder/packages/oaf/*.ipk imagebuilder/packages/

    - name: ⏬ 配置ImageBuilder
      run: |
        # 复制构建脚本
        cp arm64/build24.sh imagebuilder/
        cp shell/prepare-packages.sh imagebuilder/
        cp shell/custom-packages.sh imagebuilder/
        
        # 确保build24.sh存在
        if [ ! -f "imagebuilder/build24.sh" ]; then
          cat > imagebuilder/build24.sh << EOF
          #!/bin/bash
          set -e
          PACKAGES=""
          make image PACKAGES="\$PACKAGES"
        EOF
          chmod +x imagebuilder/build24.sh
        fi
        
        # 配置系统文件
        mkdir -p imagebuilder/files/etc/{uci-defaults,opkg}
        cp files/etc/uci-defaults/99-custom.sh imagebuilder/files/etc/uci-defaults/
        [ -f "files/etc/opkg/distfeeds.conf" ] && cp files/etc/opkg/distfeeds.conf imagebuilder/files/etc/opkg/
        
        # 配置输出格式
        cd imagebuilder
        echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
        echo "# CONFIG_TARGET_ROOTFS_SQUASHFS is not set" >> .config

    - name: 🛠️ 配置build24.sh集成OAF
      run: |
        # 清理旧配置
        sed -i '/oaf/d' imagebuilder/build24.sh
        sed -i '/open-app-filter/d' imagebuilder/build24.sh
        sed -i '/docker/d' imagebuilder/build24.sh
        
        # 添加OAF组件（直接引用IPK包名）
        echo 'PACKAGES="$PACKAGES oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES open-app-filter"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES luci-app-oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES luci-i18n-oaf-zh-cn"' >> imagebuilder/build24.sh
        
        # 添加Docker
        if [ "${{ inputs.include_docker }}" = "yes" ]; then
          echo 'PACKAGES="$PACKAGES docker docker-compose"' >> imagebuilder/build24.sh
        fi

    - name: 🧱 构建iStoreOS-rootfs（含OAF）
      working-directory: ./imagebuilder
      run: |
        # 更新包列表
        ./scripts/feeds update -a 2>/dev/null || true
        ./scripts/feeds install -a 2>/dev/null || true
        
        # 执行构建
        chmod +x build24.sh
        bash ./build24.sh || {
          echo "构建失败，查看详细日志"
          cat build_dir/target-aarch64_generic_musl/build.log 2>/dev/null
          exit 1
        }
        
        # 验证结果
        ROOTFS=$(find bin/targets/armsr/armv8 -name "*generic-rootfs.tar.gz")
        if [ -z "$ROOTFS" ]; then
          echo "未找到生成的rootfs文件"
          exit 1
        fi
        echo "生成的rootfs: $ROOTFS"

    - name: 📌 收集输出文件
      run: |
        mkdir -p release
        cp imagebuilder/bin/targets/armsr/armv8/*generic-rootfs.tar.gz release/
        cp imagebuilder/packages/oaf/*.ipk release/

    - name: 🚀 上传到Release
      uses: softprops/action-gh-release@v2.2.1
      with:
        tag_name: iStoreOS-24.10-RELEASE-${{ inputs.network_settings }}-${{ github.run_id }}
        body: |
          ## iStoreOS-24.10 含OAF防沉迷插件
          - 网络模式：${{ inputs.network_settings }}
          - 管理IP：${{ inputs.network_settings == 'static' && inputs.ipaddr || '192.168.100.1' }}
          - 已集成OAF预编译组件
        files: |
          release/*.tar.gz
          release/*.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
