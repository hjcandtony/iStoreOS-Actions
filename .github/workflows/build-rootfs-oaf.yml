name: 💿 1110St1_Build-Rootfs-release-oaf
on:
  workflow_dispatch:
    inputs:
      network_settings:
        description: "请选择初始网络配置"
        required: true
        default: 'dhcp'
        type: choice
        options:
          - 'static'
          - 'dhcp'
      ipaddr:
        description: '请输入管理IP（静态地址时必填）'
        required: true
        default: '192.168.5.88'
      gateway:
        description: '请输入默认网关（静态地址时必填）'
        required: true
        default: '192.168.5.1'
      include_docker:
        description: "是否集成Docker插件"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: ⚙️ 设置可执行权限
      run: | 
        chmod +x arm64/build24.sh
        chmod +x shell/*.sh

    - name: ⚙️ 设置IP和网关
      run: |
        CONFIG_PATH="./files/etc/uci-defaults/99-custom.sh"
        echo "当前网络配置路径：$CONFIG_PATH"
        if [ ! -f "$CONFIG_PATH" ]; then
          echo "错误：网络配置文件 $CONFIG_PATH 不存在"
          exit 1
        fi
        if [ "${{ inputs.network_settings }}" = "static" ]; then
           sed -i '44,105d' "$CONFIG_PATH"
           sed -i "/ipaddr/s/192.168.5.88/${{ inputs.ipaddr }}/g" "$CONFIG_PATH"
           sed -i "/gateway/s/192.168.5.1/${{ inputs.gateway }}/g" "$CONFIG_PATH"
        else
           sed -i '36,42d' "$CONFIG_PATH"
        fi
        cat "$CONFIG_PATH"

    - name: ⏬ 安装完整依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses5-dev zstd curl unzip tree git \
          libssl-dev python3-distutils libgmp3-dev libmpc-dev file

    - name: ⏬ 下载并配置iStoreOS ImageBuilder
      run: |
        # 下载ImageBuilder
        IMAGEBUILDER_URL="https://github.com/Kwonelee/iStoreOS-Actions/releases/download/iStoreOS-ImageBuilder-20250905/istoreos-imagebuilder-armsr-armv8.Linux-x86_64.tar.zst"
        curl -L -o imagebuilder.tar.zst "$IMAGEBUILDER_URL"
        
        # 解压并处理目录结构
        mkdir -p imagebuilder
        tar --use-compress-program=unzstd -xvf imagebuilder.tar.zst -C imagebuilder --strip-components=1
        
        # 确保核心目录存在
        for dir in "package" "bin" "build_dir"; do
          if [ ! -d "imagebuilder/$dir" ]; then
            echo "创建缺失的$dir目录"
            mkdir -p "imagebuilder/$dir"
          fi
        done
        
        # 验证Makefile存在
        if [ ! -f "imagebuilder/Makefile" ]; then
          echo "错误：ImageBuilder缺少Makefile"
          exit 1
        fi

    - name: ⏬ 克隆并修复OpenAppFilter源码结构
      run: |
        # 克隆源码到临时目录
        git clone https://github.com/destan19/OpenAppFilter.git temp_oaf
        
        # 关键修复：调整OAF目录结构以适配ImageBuilder
        OAF_COMPONENTS=("luci-app-oaf" "oaf" "open-app-filter")
        for comp in "${OAF_COMPONENTS[@]}"; do
          # 检查组件是否存在
          if [ ! -d "temp_oaf/$comp" ]; then
            echo "错误：OAF组件 $comp 缺失"
            exit 1
          fi
          # 直接复制组件到package目录
          cp -r "temp_oaf/$comp" "imagebuilder/package/"
          # 验证复制结果
          if [ ! -d "imagebuilder/package/$comp" ]; then
            echo "错误：复制OAF组件 $comp 失败"
            exit 1
          fi
        done
        
        # 清理临时文件
        rm -rf temp_oaf
        
        # 修复：使用更可靠的方式显示package目录下的OAF组件
        echo "package目录下的OAF组件："
        for comp in "${OAF_COMPONENTS[@]}"; do
          if [ -d "imagebuilder/package/$comp" ]; then
            echo "✓ 找到组件: $comp"
          else
            echo "✗ 缺失组件: $comp"
            exit 1
          fi
        done

    - name: ⏬ 复制必备文件并配置ImageBuilder
      run: |
        # 复制构建脚本
        cp arm64/{build24.sh,Makefile} imagebuilder/
        cp shell/{prepare-packages.sh,custom-packages.sh} imagebuilder/
        mkdir -p imagebuilder/packages
        find files/packages/ -name "*.ipk" -exec cp {} imagebuilder/packages/ \;
        
        # 配置系统文件
        mkdir -p imagebuilder/files/etc/{uci-defaults,opkg,banner1,openclash/core}
        cp files/etc/uci-defaults/99-custom.sh imagebuilder/files/etc/uci-defaults/
        cp files/etc/opkg/distfeeds.conf imagebuilder/files/etc/opkg/
        cp files/etc/banner imagebuilder/files/etc/banner1/
        cp files/etc/openclash/core/clash_meta imagebuilder/files/etc/openclash/core/
        cp files/etc/rc.local imagebuilder/files/etc/
        
        # 配置输出格式
        cd imagebuilder
        sed -i '/CONFIG_TARGET_ROOTFS_TARGZ/d' .config
        sed -i '/CONFIG_TARGET_ROOTFS_SQUASHFS/d' .config
        echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
        echo "# CONFIG_TARGET_ROOTFS_SQUASHFS is not set" >> .config
        
        # 配置OAF编译选项
        echo "CONFIG_PACKAGE_luci-app-oaf=y" >> .config
        echo "CONFIG_PACKAGE_oaf=y" >> .config
        echo "CONFIG_PACKAGE_open-app-filter=y" >> .config
        echo "CONFIG_PACKAGE_luci-i18n-oaf-zh-cn=y" >> .config
        
        # 配置Docker
        if [ "${{ inputs.include_docker }}" = "yes" ]; then
          echo "CONFIG_PACKAGE_docker=y" >> .config
          echo "CONFIG_PACKAGE_docker-compose=y" >> .config
        fi

    - name: 🛠️ 修改build24.sh集成OAF
      run: |
        # 清理旧配置
        sed -i '/oaf/d' imagebuilder/build24.sh
        sed -i '/open-app-filter/d' imagebuilder/build24.sh
        
        # 添加OAF组件
        echo 'PACKAGES="$PACKAGES luci-app-oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES open-app-filter"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES luci-i18n-oaf-zh-cn"' >> imagebuilder/build24.sh
        
        # 添加Docker（如果需要）
        if [ "${{ inputs.include_docker }}" = "yes" ]; then
          echo 'PACKAGES="$PACKAGES docker docker-compose"' >> imagebuilder/build24.sh
        fi

    - name: 🧱 编译OAF组件
      working-directory: ./imagebuilder
      run: |
        # 编译luci-app-oaf
        echo "编译luci-app-oaf"
        make package/luci-app-oaf/compile V=s -j4 || {
          echo "错误：luci-app-oaf编译失败"
          exit 1
        }
        
        # 编译oaf内核模块
        echo "编译oaf内核模块"
        make package/oaf/compile V=s -j4 || {
          echo "错误：oaf内核模块编译失败"
          exit 1
        }
        
        # 编译open-app-filter服务
        echo "编译open-app-filter服务"
        make package/open-app-filter/compile V=s -j4 || {
          echo "错误：open-app-filter服务编译失败"
          exit 1
        }
        
        # 验证编译结果
        OAF_IPKS=$(find bin/ -name "oaf*.ipk" -o -name "open-app-filter*.ipk")
        if [ -z "$OAF_IPKS" ]; then
          echo "错误：未找到OAF组件的IPK文件"
          exit 1
        fi
        echo "找到的OAF IPK文件："
        echo "$OAF_IPKS"

    - name: 🧱 构建iStoreOS-rootfs
      working-directory: ./imagebuilder
      run: |
        chmod +x build24.sh
        bash ./build24.sh || {
          echo "错误：rootfs构建失败"
          exit 1
        }
        
        # 验证rootfs生成
        ROOTFS=$(find bin/targets/armsr/armv8 -name "*generic-rootfs.tar.gz")
        if [ -z "$ROOTFS" ]; then
          echo "错误：未找到生成的rootfs文件"
          exit 1
        fi
        echo "生成的rootfs文件：$ROOTFS"

    - name: 📌 收集OAF组件
      run: |
        mkdir -p openappfilter_ipk/{core,service,web,language}
        find imagebuilder/bin/ -name "oaf_*.ipk" -exec cp {} openappfilter_ipk/core/ \;
        find imagebuilder/bin/ -name "open-app-filter_*.ipk" -exec cp {} openappfilter_ipk/service/ \;
        find imagebuilder/bin/ -name "luci-app-oaf_*.ipk" -exec cp {} openappfilter_ipk/web/ \;
        find imagebuilder/bin/ -name "luci-i18n-oaf-zh-cn*.ipk" -exec cp {} openappfilter_ipk/language/ \;
        
        # 验证收集结果
        echo "收集到的OAF组件："
        tree openappfilter_ipk/

    - name: 🚀 上传到Release
      uses: softprops/action-gh-release@v2.2.1
      with:
        tag_name: iStoreOS-24.10-RELEASE-${{ inputs.network_settings }}-${{ github.run_id }}
        body: |
          ## iStoreOS-24.10 含OAF防沉迷插件
          - 网络模式：${{ inputs.network_settings }}
          - 管理IP：${{ inputs.network_settings == 'static' && inputs.ipaddr || '192.168.100.1' }}
          - 集成OAF完整组件：内核模块、服务核心、Web界面
        files: |
          imagebuilder/bin/targets/armsr/armv8/*generic-rootfs.tar.gz
          openappfilter_ipk/core/*.ipk
          openappfilter_ipk/service/*.ipk
          openappfilter_ipk/web/*.ipk
          openappfilter_ipk/language/*.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
