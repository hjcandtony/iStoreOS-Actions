name: 💿 1129iStoreOS集成OAF插件
on:
  workflow_dispatch:
    inputs:
      network_settings:
        description: "网络配置"
        required: true
        default: 'dhcp'
        type: choice
        options:
          - 'static'
          - 'dhcp'
      ipaddr:
        description: '管理IP（静态时必填）'
        required: true
        default: '192.168.5.88'
      gateway:
        description: '默认网关（静态时必填）'
        required: true
        default: '192.168.5.1'
      include_docker:
        description: "集成Docker"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 检出代码
      uses: actions/checkout@v3

    - name: 准备基础脚本
      run: |
        mkdir -p arm64 shell
        # 创建基础构建脚本
        cat > arm64/build24.sh << 'EOF'
        #!/bin/bash
        set -e
        # 基础包列表
        PACKAGES=""
        # 构建镜像
        make image PACKAGES="$PACKAGES"
        EOF
        chmod +x arm64/build24.sh
        
        # 创建辅助脚本
        for script in prepare-packages.sh custom-packages.sh; do
          cat > "shell/$script" << 'EOF'
          #!/bin/bash
          exit 0
          EOF
          chmod +x "shell/$script"
        done

    - name: 配置网络参数
      run: |
        CONFIG_PATH="./files/etc/uci-defaults/99-custom.sh"
        mkdir -p "$(dirname "$CONFIG_PATH")"
        # 创建基础网络配置
        cat > "$CONFIG_PATH" << 'EOF'
        #!/bin/sh
        # 配置网络
        uci set network.lan.proto=dhcp
        uci commit network
        # 确保OAF开机启动
        [ -x /etc/init.d/oaf ] && /etc/init.d/oaf enable
        EOF
        chmod +x "$CONFIG_PATH"
        
        # 应用静态IP配置
        if [ "${{ inputs.network_settings }}" = "static" ]; then
          sed -i 's/proto=dhcp/proto=static/' "$CONFIG_PATH"
          sed -i "/lan/s/$/\nipaddr=${{ inputs.ipaddr }}\ngateway=${{ inputs.gateway }}/" "$CONFIG_PATH"
        fi

    - name: 安装依赖工具
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential zstd curl unzip git \
          libssl-dev file rsync tar

    - name: 下载iStoreOS ImageBuilder
      run: |
        # 下载并解压ImageBuilder
        IMAGEBUILDER_URL="https://github.com/Kwonelee/iStoreOS-Actions/releases/download/iStoreOS-ImageBuilder-20250905/istoreos-imagebuilder-armsr-armv8.Linux-x86_64.tar.zst"
        curl -L -o imagebuilder.tar.zst "$IMAGEBUILDER_URL"
        
        mkdir -p imagebuilder
        tar --use-compress-program=unzstd -xvf imagebuilder.tar.zst -C imagebuilder --strip-components=1
        
        # 验证核心文件
        if [ ! -f "imagebuilder/Makefile" ]; then
          echo "错误：ImageBuilder缺少Makefile"
          exit 1
        fi

    - name: 获取OAF预编译包（关键步骤）
      run: |
        # 创建OAF存储目录
        mkdir -p oaf_ipk
        OAF_VERSION="1.0.2"
        ARCH="aarch64_cortex-a53"  # 适配arm64架构
        
        # 下载四个核心组件（使用稳定版本）
        components=(
          "oaf_${OAF_VERSION}_${ARCH}.ipk"
          "open-app-filter_${OAF_VERSION}_${ARCH}.ipk"
          "luci-app-oaf_${OAF_VERSION}_all.ipk"
          "luci-i18n-oaf-zh-cn_${OAF_VERSION}_all.ipk"
        )
        
        for pkg in "${components[@]}"; do
          # 从官方源下载
          curl -fL "https://github.com/destan19/OpenAppFilter/releases/download/v${OAF_VERSION}/${pkg}" -o "oaf_ipk/${pkg}" || {
            echo "错误：下载OAF包 ${pkg} 失败"
            exit 1
          }
        done
        
        # 验证下载文件
        ls -l oaf_ipk/

    - name: 配置ImageBuilder构建参数
      run: |
        # 复制必要文件到ImageBuilder
        cp arm64/build24.sh imagebuilder/
        cp shell/*.sh imagebuilder/
        
        # 配置输出格式
        cd imagebuilder
        echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
        echo "# CONFIG_TARGET_ROOTFS_SQUASHFS is not set" >> .config
        
        # 配置Docker（如果需要）
        if [ "${{ inputs.include_docker }}" = "yes" ]; then
          echo "CONFIG_PACKAGE_docker=y" >> .config
          echo "CONFIG_PACKAGE_docker-compose=y" >> .config
        fi

    - name: 构建基础系统镜像
      working-directory: ./imagebuilder
      run: |
        chmod +x build24.sh
        ./build24.sh || {
          echo "基础镜像构建失败"
          exit 1
        }
        
        # 找到生成的rootfs
        ROOTFS=$(find bin/targets/armsr/armv8 -name "*rootfs.tar.gz" | head -n1)
        if [ -z "$ROOTFS" ]; then
          echo "错误：未找到rootfs文件"
          exit 1
        fi
        echo "基础镜像路径: $ROOTFS"
        # 复制到工作目录
        cp "$ROOTFS" ../base_rootfs.tar.gz

    - name: 向镜像中添加OAF插件（核心修复）
      run: |
        # 创建临时目录处理rootfs
        mkdir -p rootfs_mount
        # 解压基础镜像
        tar -zxf base_rootfs.tar.gz -C rootfs_mount
        
        # 复制OAF包到镜像的临时安装目录
        mkdir -p rootfs_mount/var/opkg/archives
        cp oaf_ipk/*.ipk rootfs_mount/var/opkg/archives/
        
        # 创建自动安装脚本
        cat > rootfs_mount/etc/uci-defaults/98-install-oaf << 'EOF'
        #!/bin/sh
        # 自动安装OAF插件
        opkg update
        opkg install oaf open-app-filter luci-app-oaf luci-i18n-oaf-zh-cn
        # 启动服务
        /etc/init.d/oaf start
        /etc/init.d/uhttpd restart
        EOF
        chmod +x rootfs_mount/etc/uci-defaults/98-install-oaf
        
        # 重新打包rootfs
        tar -zcf final_rootfs.tar.gz -C rootfs_mount .

    - name: 验证最终镜像
      run: |
        if [ ! -f "final_rootfs.tar.gz" ]; then
          echo "错误：最终镜像打包失败"
          exit 1
        fi
        echo "最终镜像大小: $(du -h final_rootfs.tar.gz)"

    - name: 上传最终镜像
      uses: softprops/action-gh-release@v2.2.1
      with:
        tag_name: iStoreOS-OAF-${{ github.run_id }}
        body: |
          ## iStoreOS 集成OAF防沉迷插件
          - 网络模式: ${{ inputs.network_settings }}
          - 管理IP: ${{ inputs.network_settings == 'static' && inputs.ipaddr || 'DHCP分配' }}
          - 已预安装OAF全套组件
        files: |
          final_rootfs.tar.gz
          oaf_ipk/*.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
