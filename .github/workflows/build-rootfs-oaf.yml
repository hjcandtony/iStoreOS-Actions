name: 💿 1114St1_Build-Rootfs-release-oaf
on:
  workflow_dispatch:
    inputs:
      network_settings:
        description: "请选择初始网络配置"
        required: true
        default: 'dhcp'
        type: choice
        options:
          - 'static'
          - 'dhcp'
      ipaddr:
        description: '请输入管理IP（静态地址时必填）'
        required: true
        default: '192.168.5.88'
      gateway:
        description: '请输入默认网关（静态地址时必填）'
        required: true
        default: '192.168.5.1'
      include_docker:
        description: "是否集成Docker插件"
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: ⚙️ 设置可执行权限
      run: | 
        chmod +x arm64/build24.sh
        chmod +x shell/*.sh

    - name: ⚙️ 设置IP和网关
      run: |
        CONFIG_PATH="./files/etc/uci-defaults/99-custom.sh"
        echo "当前网络配置路径：$CONFIG_PATH"
        if [ ! -f "$CONFIG_PATH" ]; then
          echo "错误：网络配置文件 $CONFIG_PATH 不存在"
          exit 1
        fi
        if [ "${{ inputs.network_settings }}" = "static" ]; then
           sed -i '44,105d' "$CONFIG_PATH"
           sed -i "/ipaddr/s/192.168.5.88/${{ inputs.ipaddr }}/g" "$CONFIG_PATH"
           sed -i "/gateway/s/192.168.5.1/${{ inputs.gateway }}/g" "$CONFIG_PATH"
        else
           sed -i '36,42d' "$CONFIG_PATH"
        fi
        cat "$CONFIG_PATH"

    - name: ⏬ 安装完整依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses5-dev zstd curl unzip tree git \
          libssl-dev python3-distutils libgmp3-dev libmpc-dev file \
          rsync  # 新增rsync用于可靠复制文件

    - name: ⏬ 下载并配置iStoreOS ImageBuilder
      run: |
        # 下载ImageBuilder
        IMAGEBUILDER_URL="https://github.com/Kwonelee/iStoreOS-Actions/releases/download/iStoreOS-ImageBuilder-20250905/istoreos-imagebuilder-armsr-armv8.Linux-x86_64.tar.zst"
        curl -L -o imagebuilder.tar.zst "$IMAGEBUILDER_URL"
        
        # 解压并处理目录结构
        mkdir -p imagebuilder
        tar --use-compress-program=unzstd -xvf imagebuilder.tar.zst -C imagebuilder --strip-components=1
        
        # 确保核心目录存在
        for dir in "package" "bin" "build_dir" "feeds" "target"; do
          if [ ! -d "imagebuilder/$dir" ]; then
            echo "创建缺失的$dir目录"
            mkdir -p "imagebuilder/$dir"
          fi
        done
        
        # 验证ImageBuilder完整性
        if [ ! -f "imagebuilder/Makefile" ] || [ ! -f "imagebuilder/rules.mk" ]; then
          echo "错误：ImageBuilder核心文件缺失（Makefile或rules.mk）"
          exit 1
        fi

    - name: ⏬ 克隆并修复OpenAppFilter源码（符合OpenWrt规范）
      run: |
        # 克隆源码（指定分支确保稳定性）
        git clone --depth 1 https://github.com/destan19/OpenAppFilter.git temp_oaf
        
        # 定义必要组件
        OAF_COMPONENTS=("luci-app-oaf" "oaf" "open-app-filter")
        OAF_PACKAGE_DIR="imagebuilder/package"
        
        # 复制并修复每个组件
        for comp in "${OAF_COMPONENTS[@]}"; do
          # 1. 验证源组件存在
          SRC_DIR="temp_oaf/$comp"
          if [ ! -d "$SRC_DIR" ]; then
            echo "错误：OAF源组件 $comp 缺失（路径：$SRC_DIR）"
            exit 1
          fi
          
          # 2. 复制组件到package目录（使用rsync确保权限和结构）
          DST_DIR="$OAF_PACKAGE_DIR/$comp"
          rsync -av "$SRC_DIR/" "$DST_DIR/"
          
          # 3. 验证关键文件（必须存在Makefile和正确结构）
          if [ ! -f "$DST_DIR/Makefile" ]; then
            echo "错误：组件 $comp 缺失Makefile（路径：$DST_DIR/Makefile）"
            exit 1
          fi
          
          # 4. 修复Makefile中的可能路径问题（适配ImageBuilder）
          sed -i "s|$(TOPDIR)/package/OpenAppFilter/|$(TOPDIR)/package/|g" "$DST_DIR/Makefile"
          
          # 5. 验证修复结果
          echo "组件 $comp 验证通过，目录结构："
          ls -la "$DST_DIR"
        done
        
        # 清理临时文件
        rm -rf temp_oaf
        
        # 生成package索引（关键：让ImageBuilder识别新组件）
        cd imagebuilder
        make package/index V=s
        
        # 验证组件是否被识别
        echo "ImageBuilder识别的OAF组件："
        grep -E "luci-app-oaf|oaf|open-app-filter" package/index | cut -d' ' -f1

    - name: ⏬ 配置ImageBuilder编译选项
      run: |
        cd imagebuilder
        
        # 重置OAF相关配置
        sed -i '/CONFIG_PACKAGE_luci-app-oaf/d' .config
        sed -i '/CONFIG_PACKAGE_oaf/d' .config
        sed -i '/CONFIG_PACKAGE_open-app-filter/d' .config
        
        # 强制启用OAF组件（使用ImageBuilder的配置命令）
        make defconfig  # 先加载默认配置
        echo "CONFIG_PACKAGE_luci-app-oaf=y" >> .config
        echo "CONFIG_PACKAGE_oaf=y" >> .config
        echo "CONFIG_PACKAGE_open-app-filter=y" >> .config
        echo "CONFIG_PACKAGE_luci-i18n-oaf-zh-cn=y" >> .config
        
        # 配置输出格式
        sed -i '/CONFIG_TARGET_ROOTFS_TARGZ/d' .config
        sed -i '/CONFIG_TARGET_ROOTFS_SQUASHFS/d' .config
        echo "CONFIG_TARGET_ROOTFS_TARGZ=y" >> .config
        echo "# CONFIG_TARGET_ROOTFS_SQUASHFS is not set" >> .config
        
        # 配置Docker
        if [ "${{ inputs.include_docker }}" = "yes" ]; then
          echo "CONFIG_PACKAGE_docker=y" >> .config
          echo "CONFIG_PACKAGE_docker-compose=y" >> .config
        fi
        
        # 应用配置
        make defconfig

    - name: 🛠️ 修正build24.sh确保OAF被包含
      run: |
        # 清理旧配置
        sed -i '/oaf/d' imagebuilder/build24.sh
        sed -i '/open-app-filter/d' imagebuilder/build24.sh
        
        # 明确添加OAF组件到PACKAGES
        echo 'PACKAGES="$PACKAGES luci-app-oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES oaf"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES open-app-filter"' >> imagebuilder/build24.sh
        echo 'PACKAGES="$PACKAGES luci-i18n-oaf-zh-cn"' >> imagebuilder/build24.sh
        
        # 添加Docker（如果需要）
        if [ "${{ inputs.include_docker }}" = "yes" ]; then
          echo 'PACKAGES="$PACKAGES docker docker-compose"' >> imagebuilder/build24.sh
        fi

    - name: 🧱 编译OAF组件（使用OpenWrt标准命令）
      working-directory: ./imagebuilder
      run: |
        # 关键：先更新package索引
        make package/update V=s
        
        # 编译luci-app-oaf（带详细日志）
        echo "=== 编译luci-app-oaf ==="
        if ! make package/luci-app-oaf/compile V=s; then
          echo "错误：luci-app-oaf编译失败，查看以下日志："
          cat build_dir/target-aarch64_generic_musl/luci-app-oaf/compile.log 2>/dev/null
          exit 1
        fi
        
        # 编译oaf内核模块
        echo "=== 编译oaf内核模块 ==="
        if ! make package/oaf/compile V=s; then
          echo "错误：oaf内核模块编译失败"
          exit 1
        fi
        
        # 编译open-app-filter服务
        echo "=== 编译open-app-filter服务 ==="
        if ! make package/open-app-filter/compile V=s; then
          echo "错误：open-app-filter服务编译失败"
          exit 1
        fi
        
        # 验证IPK生成
        OAF_IPKS=$(find bin/packages/armsr/ -name "oaf*.ipk" -o -name "open-app-filter*.ipk")
        if [ -z "$OAF_IPKS" ]; then
          echo "错误：未找到OAF组件的IPK文件"
          exit 1
        fi
        echo "生成的OAF IPK文件："
        echo "$OAF_IPKS"

    - name: 🧱 构建iStoreOS-rootfs
      working-directory: ./imagebuilder
      run: |
        chmod +x build24.sh
        bash ./build24.sh || {
          echo "错误：rootfs构建失败"
          exit 1
        }
        
        # 验证rootfs
        ROOTFS=$(find bin/targets/armsr/armv8 -name "*generic-rootfs.tar.gz")
        if [ -z "$ROOTFS" ]; then
          echo "错误：未找到rootfs文件"
          exit 1
        fi
        echo "生成的rootfs：$ROOTFS"

    - name: 📌 收集OAF组件
      run: |
        mkdir -p openappfilter_ipk/{core,service,web,language}
        find imagebuilder/bin/ -name "oaf_*.ipk" -exec cp {} openappfilter_ipk/core/ \;
        find imagebuilder/bin/ -name "open-app-filter_*.ipk" -exec cp {} openappfilter_ipk/service/ \;
        find imagebuilder/bin/ -name "luci-app-oaf_*.ipk" -exec cp {} openappfilter_ipk/web/ \;
        find imagebuilder/bin/ -name "luci-i18n-oaf-zh-cn*.ipk" -exec cp {} openappfilter_ipk/language/ \;

    - name: 🚀 上传到Release
      uses: softprops/action-gh-release@v2.2.1
      with:
        tag_name: iStoreOS-24.10-RELEASE-${{ inputs.network_settings }}-${{ github.run_id }}
        body: |
          ## iStoreOS-24.10 含OAF防沉迷插件
          - 网络模式：${{ inputs.network_settings }}
          - 管理IP：${{ inputs.network_settings == 'static' && inputs.ipaddr || '192.168.100.1' }}
          - 集成OAF完整组件
        files: |
          imagebuilder/bin/targets/armsr/armv8/*generic-rootfs.tar.gz
          openappfilter_ipk/core/*.ipk
          openappfilter_ipk/service/*.ipk
          openappfilter_ipk/web/*.ipk
          openappfilter_ipk/language/*.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
